import datetime

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart
from aiogram.dispatcher.filters.state import StatesGroup, State, default_state

from config import BOT_TOKEN
from db_worker import DatabaseWorker
from db_order import DatabaseOrder
from utility import start_places, has_places

bot = Bot(BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
db_worker = DatabaseWorker()
db_order = DatabaseOrder()


class EnterWorkerData(StatesGroup):
    waiting_for_city = State()
    waiting_for_number = State()
    waiting_for_name = State()
    waiting_for_surname = State()


class EnterOrderData(StatesGroup):
    waiting_for_order = State()


@dp.message_handler(CommandStart())
async def cmd_start(message: types.Message):
    if not db_worker.is_registered(message.from_user.id):
        start_reg_markup = types.InlineKeyboardMarkup(resize_keyboard=True, one_time_keybord=True)
        bt1 = types.InlineKeyboardButton('üí™–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüí™', callback_data='registration')
        start_reg_markup.add(bt1)
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ ¬´–•–∞–ª—Ç—É—Ä–∞¬ª.\n\n–ú—ã —Ä–∞–¥—ã —Ç–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å!'
            f' –ù–∞–¥–µ–µ–º—Å—è –Ω–∞ –¥–æ–ª–≥–æ–µ –∏ –ø–ª–æ–¥–æ—Ç–≤–æ—Ä–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æü§ù'
            f'\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ\n'
            f'üëáüëáüëáüëáüëá ', reply_markup=start_reg_markup)
    elif db_worker.is_registered(message.from_user.id) and not db_worker.is_admin(message.from_user.id):
        start_work_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        bt1 = types.KeyboardButton('üë§–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ')
        bt2 = types.KeyboardButton('ü§ù–ú–æ–∏ –∑–∞—è–≤–∫–∏')
        start_work_markup.row(bt1, bt2)
        await message.answer('–ú–æ–∂–µ–º –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µü§ù', reply_markup=start_work_markup)
    elif db_worker.is_admin(message.from_user.id):
        start_work_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        bt1 = types.KeyboardButton('‚õë–î–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏—Ö')
        bt2 = types.KeyboardButton('üîñ–ó–∞–∫–∞–∑—ã')
        bt3 = types.KeyboardButton('üì©–í—ã–ª–æ–∂–∏—Ç—å –∑–∞–∫–∞–∑')
        start_work_markup.row(bt1, bt2)
        start_work_markup.row(bt3)
        await message.answer('‚ú®–ü—Ä–∏–≤–µ—Ç, —Ç—ã —è–≤–ª—è–µ—à—å—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞,'
                             ' –º–æ–∂–µ—à—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏—Ö –∏ –æ–ø–æ–≤–µ—â–∞—Ç—å –∏—Ö –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö.üíµ'
                             '\n üîî–¢–∞–∫–∂–µ —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–∏–∫–∞—Ö —Ä–∞–±–æ—á–∏—Ö.',
                             reply_markup=start_work_markup)


@dp.callback_query_handler(state=default_state, text_startswith='registration')
async def registration(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.chat.type == 'private':
        await callback.message.delete()
        await callback.message.answer('üëá–î–ª—è –Ω–∞—á–∞–ª–∞ - –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏üëá\n'
                                      '‚ö†Ô∏è–í —Ñ–æ—Ä–º–∞—Ç–µ <code>+79XXXXXXXXX</code>', parse_mode='html')
        await state.set_state(EnterWorkerData.waiting_for_number.state)


@dp.message_handler(state=EnterWorkerData.waiting_for_number)
async def number_chosen(message: types.Message, state: FSMContext):
    reg_city_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    bt1 = types.KeyboardButton("–ù–æ–≤–æ–∫—É–π–±—ã—à–µ–≤—Å–∫")
    bt2 = types.KeyboardButton("–°–∞–º–∞—Ä–∞")
    bt3 = types.KeyboardButton("–ö–∞–∑–∞–Ω—å")
    reg_city_markup.row(bt1, bt2, bt3)
    await message.answer('üì±')
    await message.answer('üëá–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥üëá', reply_markup=reg_city_markup)
    await state.update_data(phone_number=message.text)
    await state.set_state(EnterWorkerData.waiting_for_city.state)


@dp.message_handler(state=EnterWorkerData.waiting_for_city.state)
async def city_chosen(message: types.Message, state: FSMContext):
    await message.answer('üè†')
    await message.answer('üëá–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—éüëá')
    await state.update_data(city=message.text)
    await state.set_state(EnterWorkerData.waiting_for_surname.state)


@dp.message_handler(state=EnterWorkerData.waiting_for_surname.state)
async def surname_chosen(message: types.Message, state: FSMContext):
    await message.answer('‚úèÔ∏è')
    await message.answer('üëá–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ –∏–º—èüëá')
    await state.update_data(surname=message.text)
    await state.set_state(EnterWorkerData.waiting_for_name.state)


@dp.message_handler(state=EnterWorkerData.waiting_for_name.state)
async def surname_chosen(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer('ü™™')
    worker_data = await state.get_data()
    start_work_markup = types.InlineKeyboardMarkup(resize_keyboard=True)
    bt1 = types.InlineKeyboardButton('‚úÖ–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ', callback_data='start_work')
    start_work_markup.add(bt1)
    db_worker.add_worker(message.from_user.id, worker_data["phone_number"],
                         f'{worker_data["surname"]} {worker_data["name"]}',
                         worker_data["city"])
    await message.answer(f'üë§–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n\nüì±–¢–µ–ª–µ—Ñ–æ–Ω: {worker_data["phone_number"]}'
                         f'\nüåç–ì–æ—Ä–æ–¥: {worker_data["city"]}'
                         f'\nüë∑üèª‚Äç‚ôÇÔ∏è–§–ò–û: {worker_data["surname"]} {worker_data["name"]}',
                         reply_markup=start_work_markup)
    await state.finish()


@dp.message_handler(commands=['order'], state=default_state)
async def send_order(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        await message.answer('üì®–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É')
        await state.set_state(EnterOrderData.waiting_for_order.state)


@dp.message_handler(content_types=['text'])
async def messages(message: types.Message):
    if message.text == 'üë§–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ':
        worker_data = db_worker.info_worker(message.from_user.id)
        profile_markup = types.InlineKeyboardMarkup(resize_keyboard=True)
        bt1 = types.InlineKeyboardButton('üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤', callback_data='statistics')
        bt2 = types.InlineKeyboardButton('üìù–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data='edit')
        profile_markup.row(bt1, bt2)
        await message.answer(f'üë§–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n\nüì±–¢–µ–ª–µ—Ñ–æ–Ω: {worker_data[1]}'
                             f'\nüåç–ì–æ—Ä–æ–¥: {worker_data[3]}'
                             f'\nüë∑üèª‚Äç‚ôÇÔ∏è–§–ò–û: {worker_data[2]}', reply_markup=profile_markup)
    elif message.text == 'ü§ù–ú–æ–∏ –∑–∞—è–≤–∫–∏':
        if db_order.all_orders(message.from_user.id):
            pass
        else:
            await message.answer('‚ùå–£ –≤–∞—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∑–∞—è–≤–æ–∫')

    elif message.text == '‚õë–î–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏—Ö':
        pass

    elif message.text == 'üîñ–ó–∞–∫–∞–∑—ã':
        pass

    elif message.text == 'üì©–í—ã–ª–æ–∂–∏—Ç—å –∑–∞–∫–∞–∑':
        await message.answer('‚ö†Ô∏è–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã–ª–æ–∂–∏—Ç—å –∑–∞–∫–∞–∑ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /order\n'
                             ' –∏ –ø–æ—Å–ª–µ –Ω–µ–µ –ø—Ä–æ–ø–∏—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n'
                             '–ì–æ—Ä–æ–¥\n'
                             '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫\n'
                             '–ú–∏–Ω–∏–º–∞–ª–∫–∞ (—á–∞—Å–æ–≤)\n'
                             '–ê–¥—Ä–µ—Å\n'
                             '–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è\n'
                             '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n'
                             '–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (—á–∞—Å–æ–≤)\n'
                             '–û–ø–ª–∞—Ç–∞ –≤ —á–∞—Å (—Ä—É–±.)\n\n'
                             'üì∂–ü—Ä–∏–º–µ—Ä –∑–∞–∫–∞–∑–∞:\n\n'
                             '<code>–ì–æ—Ä–æ–¥|</code>–°–∞–º–∞—Ä–∞\n'
                             '<code>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫|</code>2\n'
                             '<code>–ú–∏–Ω–∏–º–∞–ª–∫–∞ (—á–∞—Å–æ–≤)|</code>2\n'
                             '<code>–ê–¥—Ä–µ—Å|</code>–ö–∞—Ñ–µ –†–∏–æ\n'
                             '<code>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è|</code>–∑–∞–≤—Ç—Ä–∞ 10:00\n'
                             '<code>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞|</code>–ö–æ–ø–∞—Ç—å —Ç—Ä–∞–Ω—à–µ—é (30—Å–º –≤ –¥–ª–∏–Ω—É)\n'
                             '<code>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (—á–∞—Å–æ–≤)|</code>3\n'
                             '<code>–û–ø–ª–∞—Ç–∞ –≤ —á–∞—Å (—Ä—É–±.)|</code>450\n\n'
                             'üí°–õ—É—á—à–µ —Å–∫–æ–ø–∏—Ä—É–π –ø—Ä–∏–º–µ—Ä –∏ –ø–æ–º–µ–Ω—è–π –≤—Å–µ –ø—É–Ω–∫—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –æ—à–∏–±–∏—Ç—å—Å—è.', parse_mode='html')


@dp.message_handler(state=EnterOrderData.waiting_for_order.state)
async def confirm_send_order(message: types.Message, state: FSMContext):
    await state.update_data(order_text=message.text)
    order_data = await state.get_data()
    send_order_markup = types.InlineKeyboardMarkup(resize_keyboard=True)
    bt1 = types.InlineKeyboardButton('‚úÖ–í—Å–µ –≤–µ—Ä–Ω–æ, —Ä–∞–∑–æ—Å–ª–∞—Ç—å –∑–∞–∫–∞–∑', callback_data='send_order')
    send_order_markup.add(bt1)
    await message.answer(f'{order_data["order_text"]}',
                         reply_markup=send_order_markup)
    await state.finish()


@dp.callback_query_handler(text_startswith='statistics')
async def statistics(callback: types.CallbackQuery):
    await callback.message.edit_text(f'üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:\n\n'
                                     f'ü§ù–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(db_order.all_orders(callback.from_user.id))}\n'
                                     f'‚úÖ–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(list(filter(lambda order: order[10] == 2, db_order.all_orders(callback.from_user.id))))}\n'
                                     f'‚õîÔ∏è–ë—Ä–∞–∫: {len(list(filter(lambda order: order[10] == 3, db_order.all_orders(callback.from_user.id))))}')


@dp.callback_query_handler(text_startswith='start_work')
async def start_work(callback: types.CallbackQuery):
    start_work_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bt1 = types.KeyboardButton('üë§–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ')
    bt2 = types.KeyboardButton('ü§ù–ú–æ–∏ –∑–∞—è–≤–∫–∏')
    start_work_markup.row(bt1, bt2)
    await callback.message.delete()
    await callback.message.answer('üóù')
    await callback.message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π‚úÖ\n'
                                  '‚è≥–û–∂–∏–¥–∞–π –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫!\n'
                                  'üÜó–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É –º–æ–∂–Ω–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∑–∞—è–≤–∫–æ–π.',
                                  reply_markup=start_work_markup)


@dp.callback_query_handler(text_startswith='send_order')
async def send_all_order(callback: types.CallbackQuery):
    order_id = f'{callback.from_user.id}_1_{datetime.datetime.now()}'
    db_order.add_order(order_id,
                       callback.message.text.split('\n')[0].split('–ì–æ—Ä–æ–¥|')[1],
                       callback.message.text.split('\n')[1].split('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫|')[1],
                       callback.message.text.split('\n')[2].split('–ú–∏–Ω–∏–º–∞–ª–∫–∞ (—á–∞—Å–æ–≤)|')[1],
                       callback.message.text.split('\n')[3].split('–ê–¥—Ä–µ—Å|')[1],
                       callback.message.text.split('\n')[4].split('–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è|')[1],
                       callback.message.text.split('\n')[6].split('–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (—á–∞—Å–æ–≤)|')[1],
                       callback.message.text.split('\n')[7].split('–û–ø–ª–∞—Ç–∞ –≤ —á–∞—Å (—Ä—É–±.)|')[1],
                       callback.message.text.split('\n')[5].split('–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞|')[1]
                       )
    order_info = db_order.select_info_order(order_id)
    text = (f'üîß–ó–∞–∫–∞–∑üîß\n\n'
            f'‚ñ™Ô∏è<b>{order_info[3]}</b>\n‚ñ™Ô∏èÔ∏è<b>–ù—É–∂–Ω—ã</b> {order_info[4]}/{start_places(order_id)} —á–µ–ª–æ–≤–µ–∫(–∞)‚úÖ\n'
            f'‚ñ™Ô∏è<b>–ê–¥—Ä–µ—Å</b>:üëâ <a href="https://yandex.ru/maps/?text={order_info[3]}+{order_info[6].replace(" ", "+")}">{order_info[6]}</a>\n'
            f'‚ñ™Ô∏è<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {order_info[11]}\n'
            f'‚ñ™Ô∏è<b>–ù–∞—á–∞–ª–æ</b>: {order_info[7]}\n'
            f'‚ñ™Ô∏è<b>–û–ø–ª–∞—Ç–∞</b>: {order_info[9]} ‚ÇΩ/—á–∞—Å, –º–∏–Ω–∏–º—É–º {order_info[5]}\n'
            f'‚ñ™Ô∏è<b>–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</b>: {order_info[8]} —á–∞—Å–æ–≤\n'
            f'‚ñ™Ô∏è<b>–ü–æ–ª—É—á–∏—à—å –º–∏–Ω–∏–º—É–º</b>: {int(order_info[9]) * int(order_info[5])} —Ä—É–±.')
    worker_markup = types.InlineKeyboardMarkup(resize_keyboard=True)
    limit = int(order_info[4]) + 1 if int(order_info[4]) < 4 else 4
    for i in range(1, int(limit)):
        if i == 1:
            worker_markup.add(types.InlineKeyboardButton('ü§ù–ü–æ–µ–¥—É 1', callback_data=f'want_1_{order_id}'))
        else:
            worker_markup.add(types.InlineKeyboardButton(f'ü§ù–ü–æ–µ–¥–µ–º –≤ {i}', callback_data=f'want_{i}_{order_id}'))

    bt2 = types.InlineKeyboardButton('üìû–°–≤—è–∑–∞—Ç—å—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π', url='https://t.me/gregory237')
    worker_markup.add(bt2)
    for worker_id in db_worker.all_worker_id_by_city(callback.message.text.split('\n')[0].split('–ì–æ—Ä–æ–¥|')[1]):
        await bot.send_message(worker_id[0],
                               text, parse_mode='html', reply_markup=worker_markup)
    await callback.message.edit_text('‚úÖ–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω. –û–∂–∏–¥–∞–π –æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ –∑–∞–∫–∞–∑—É.üï∞')


@dp.callback_query_handler(text_startswith='want')
async def work_on_order(callback: types.CallbackQuery):
    order_id = callback.data.split('_')[2] + '_' + callback.data.split('_')[3] + '_' + callback.data.split('_')[4]
    order_info = db_order.select_info_order(order_id)
    text_order = (f'‚ñ™Ô∏è<b>{order_info[3]}</b>\n‚ñ™Ô∏èÔ∏è<b>–ù—É–∂–Ω—ã</b> {order_info[4]}/{start_places(order_id)} —á–µ–ª–æ–≤–µ–∫(–∞)‚úÖ\n'
                  f'‚ñ™Ô∏è<b>–ê–¥—Ä–µ—Å</b>:üëâ <a href="https://yandex.ru/maps/?text={order_info[3]}+{order_info[6].replace(" ", "+")}">{order_info[6]}</a>\n'
                  f'‚ñ™Ô∏è<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {order_info[11]}\n'
                  f'‚ñ™Ô∏è<b>–ù–∞—á–∞–ª–æ</b>: {order_info[7]}\n'
                  f'‚ñ™Ô∏è<b>–û–ø–ª–∞—Ç–∞</b>: {order_info[9]} ‚ÇΩ/—á–∞—Å, –º–∏–Ω–∏–º—É–º {order_info[5]}\n'
                  f'‚ñ™Ô∏è<b>–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</b>: {order_info[8]} —á–∞—Å–æ–≤\n'
                  f'‚ñ™Ô∏è<b>–ü–æ–ª—É—á–∏—à—å –º–∏–Ω–∏–º—É–º</b>: {int(order_info[9]) * int(order_info[5])} —Ä—É–±.')
    admin_id = callback.data.split('_')[2]
    worker_info = db_worker.info_worker(callback.from_user.id)
    confirm_worker = types.InlineKeyboardMarkup(resize_keyboard=True)
    bt1 = types.InlineKeyboardButton('‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É',
                                     callback_data=f"confirm_{callback.from_user.id}"
                                                   f"_{callback.data.split('_')[1]}"
                                                   f"_{order_id}")
    bt2 = types.InlineKeyboardButton('‚ùå–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É',
                                     callback_data=f"reject_{callback.from_user.id}" +
                                                   f"_{order_id}")
    confirm_worker.add(bt1, bt2)
    if has_places(order_id, int(callback.data.split("_")[1])):
        await callback.message.edit_text('‚úÖ–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –¥–∞–ª–µ–µ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.')
        await bot.send_message(admin_id, f'üîî–ù–∞ –∑–∞–∫–∞–∑:\n\n{text_order}\n\n‚õë–û—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è —Ä–∞–±–æ—á–∏–π:\n\n'
                                         f'üë§{worker_info[2]}\n'
                                         f'üìû{worker_info[1]}\n'
                                         f'üöò–ü–æ–µ–¥–µ—Ç {callback.data.split("_")[1]} —á–µ–ª–æ–≤–µ–∫(–∞)',
                               reply_markup=confirm_worker, parse_mode='html')
    else:
        await bot.answer_callback_query(callback.id, '‚ùóÔ∏è–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ –¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ —É–∂–µ –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–µ—Å—Ç.',
                                        show_alert=True)


@dp.callback_query_handler(text_startswith='confirm')
async def confirm_worker_on_order(callback: types.CallbackQuery):
    order_id = callback.data.split('_')[3] + '_' + callback.data.split('_')[4] + '_' + callback.data.split('_')[5]
    db_order.update_after_confirm(order_id,
                                  callback.data.split('_')[1], int(callback.data.split('_')[2]))
    old_order = db_order.select_info_order(order_id)
    if int(old_order[4]) - int(old_order[2]) > 0:
        db_order.add_order(
            callback.from_user.id,
            callback.data.split('_')[3] + '_' + str(int(callback.data.split('_')[4]) + 1) + '_' +
            callback.data.split('_')[5],
            old_order[3],
            str(int(old_order[4]) - int(old_order[2])),
            old_order[5],
            old_order[6],
            old_order[7],
            old_order[8],
            old_order[9],
            old_order[11],
        )
        new_order_id = callback.data.split('_')[3] + '_' + str(int(callback.data.split('_')[4]) + 1) + '_' + \
                       callback.data.split('_')[5]
        new_order = db_order.select_info_order(new_order_id)
        text = (f'üîß–ó–∞–∫–∞–∑üîß\n\n'
                f'‚ñ™Ô∏è<b>{new_order[3]}</b>\n‚ñ™Ô∏èÔ∏è<b>–ù—É–∂–Ω—ã</b> {new_order[4]}/{start_places(new_order_id)} —á–µ–ª–æ–≤–µ–∫(–∞)‚úÖ\n'
                f'‚ñ™Ô∏è<b>–ê–¥—Ä–µ—Å</b>:üëâ <a href="https://yandex.ru/maps/?text={new_order[3]}+{new_order[6].replace(" ", "+")}">{new_order[6]}</a>\n'
                f'‚ñ™Ô∏è<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {new_order[11]}\n'
                f'‚ñ™Ô∏è<b>–ù–∞—á–∞–ª–æ</b>: {new_order[7]}\n'
                f'‚ñ™Ô∏è<b>–û–ø–ª–∞—Ç–∞</b>: {new_order[9]} ‚ÇΩ/—á–∞—Å, –º–∏–Ω–∏–º—É–º {new_order[5]}\n'
                f'‚ñ™Ô∏è<b>–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</b>: {new_order[8]} —á–∞—Å–æ–≤\n'
                f'‚ñ™Ô∏è<b>–ü–æ–ª—É—á–∏—à—å –º–∏–Ω–∏–º—É–º</b>: {int(new_order[9]) * int(new_order[5])} —Ä—É–±.')
        worker_markup = types.InlineKeyboardMarkup(resize_keyboard=True)
        limit = int(new_order[4]) + 1 if int(new_order[4]) < 4 else 4
        for i in range(1, int(limit)):
            if i == 1:
                worker_markup.add(types.InlineKeyboardButton('ü§ù–ü–æ–µ–¥—É 1', callback_data=f'want_1_{new_order[0]}'))
            else:
                worker_markup.add(
                    types.InlineKeyboardButton(f'ü§ù–ü–æ–µ–¥–µ–º –≤ {i}', callback_data=f'want_{i}_{new_order[0]}'))

        bt2 = types.InlineKeyboardButton('üìû–°–≤—è–∑–∞—Ç—å—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π', url='https://t.me/gregory237')
        worker_markup.add(bt2)
        for worker_id in db_worker.all_worker_id_by_city(new_order[3]):
            if worker_id[0] != old_order[1]:
                await bot.send_message(worker_id[0], text, reply_markup=worker_markup, parse_mode='html')
    await callback.message.edit_text('ü§ù–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –†–∞–±–æ—á–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞–∫–∞–∑.')
    await bot.send_message(int(callback.data.split('_')[1]),
                           'ü§ù–í–∞—à—É –∑–∞—è–≤–∫—É –æ–¥–æ–±—Ä–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –≤—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ –∑–∞–∫–∞–∑')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
